type Query {
    info: String!
    feed: [Link!]!
    getUsers: [User!]!
    getCommunitys: [Community!]!
}

type Mutation {
    post(url: String!, description: String!): Link!
    createUser(username: String!, firstName: String!, lastName: String!, email: String!, password: String!) : User
    login(email: String!, password: String!) : User #AuthPayload
    createCommunity(name: String!, category: String!, hasPosts: Boolean!, hasMessages: Boolean!, privacy: String!) : Community
    updateLink(id: ID!, url: String, description: String) : Link
    deleteLink(id: ID!) : Link
}

type AuthPayload {
    token: String
    user: User
}

type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
}

type User {
    firstName: String!
    lastName: String!
    email: String! 
    username: String! 
    password: String!
    messages: [Message!]
    communities: [Community!]
    posts: [Post!]
}

type Community {
    name: String!
    category: String!
    posts: [Post!]
    hasPosts: Boolean!
    hasMessages: Boolean!
    privacy: String!
}

type Post {
    text: String!
    community: Community!
    user: User!
}

type Message {
    sender: User!
    recip: User!
    content: String!
    community: Community!
}
